// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    SOLUTION_VERIFIER_ELF, SOLUTION_VERIFIER_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();

    // Here is the input that we will use for proving. The scramble and solution
    let input: Vec<String> = vec!["U U D' L R R L B F'", "F B' L' R' R' L' D U' U'"]
                         .iter().map(|&s| s.to_string()).collect();

    // Create an executor environment with the input.
    let env = ExecutorEnv::builder().write(&input).unwrap().build().unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove_elf(env, SOLUTION_VERIFIER_ELF).unwrap();

    // Decode the receipt journal into a string.
    let _output: String = receipt.journal.decode().unwrap();

    // Optional: Verify receipt to confirm that recipients will also be able to
    // verify your receipt
    receipt.verify(SOLUTION_VERIFIER_ID).unwrap();
}
